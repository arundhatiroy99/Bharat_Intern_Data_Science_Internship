# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Define the company and time period for the stock data
company_symbol = 'AAPL'  # Change this to your desired company's symbol
start_date = '2010-01-01'
end_date = '2021-12-31'

# Fetch historical stock price data using Yahoo Finance
data = yf.download(company_symbol, start=start_date, end=end_date)

# Select the 'Close' price for prediction
data = data[['Close']]

# Plot the stock price data
plt.figure(figsize=(12, 6))
plt.title(f'{company_symbol} Stock Price')
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.plot(data['Close'])
plt.show()

# Data preprocessing
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Create sequences for training the LSTM model
sequence_length = 60  # You can adjust this window size
X = []
y = []

for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i - sequence_length:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)

# Split the data into training and testing sets
train_size = int(0.8 * len(X))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Build the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dense(units=25))
model.add(Dense(units=1))

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X_train, y_train, batch_size=64, epochs=50)

# Evaluate the model
test_loss = model.evaluate(X_test, y_test)
print(f'Test Loss: {test_loss:.4f}')

# Make predictions
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Plot the predictions against the actual stock prices
plt.figure(figsize=(12, 6))
plt.title(f'{company_symbol} Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.plot(data.index[-len(predictions):], data['Close'].values[-len(predictions):], label='Actual Prices')
plt.plot(data.index[-len(predictions):], predictions, label='Predicted Prices', linestyle='--')
plt.legend()
plt.show()
